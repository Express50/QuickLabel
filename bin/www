#!/usr/bin/env node

/**
 * Module dependencies.
 */
const electron = require('electron');
const ElectronApp = electron.app;
const BrowserWindow = electron.BrowserWindow;
const dialog = electron.dialog;

const http = require('http');
const debug = require('debug')('quicklabel:server');
const app = require('../app');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
console.log("Port: ", app.get('port'));
/**
 * Create HTTP server.
 */
let window = null;
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, 'localhost', function(){
  console.log("Server Ready");
  // Wait until the app is ready
  if (isElectron()){
    if (ElectronApp.isReady()){
      onElectronReady();
    } else {
      console.log("Waiting for Electron");
      ElectronApp.on('ready', onElectronReady);
    }
  }
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onElectronReady() {
  console.log("Electron ready");
  // Create a new window
  window = new BrowserWindow({
    // Set the initial width to 800px
    width: 800,
    // Set the initial height to 600px
    height: 600,
    // Set the default background color of the window to match the CSS
    // background color of the page, this prevents any white flickering
    backgroundColor: "##D0D0D0",
    // Don't show the window until it's ready, this prevents any white flickering
    show: false,
    title: 'Quick Label',
    webPreferences: {
      nodeIntegration: true
    }
  });

  window.loadURL("http://localhost:" + port + "/settings");

  // Show window when page is ready
  window.once('ready-to-show', () => {
    console.log("Launching Chromium");
    window.show()
  });

  window.on('closed', () => {
    // Dereference the window object, usually you would store windows
    // in an array if your app supports multi windows, this is the time
    // when you should delete the corresponding element.
    window = null
  });

  ElectronApp.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
      console.log("Exiting app");
      ElectronApp.quit();
      server.close();
    }
  });
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function isElectron() {
  return typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron;
}